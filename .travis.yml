env:
  matrix:
  - MYCONDAPY=2.7
#  - MYCONDAPY=3.5
#  - MYCONDAPY=3.6
  global:
    # ANACONDA_TOKEN
    - secure: "EwDvNNbo6xnXz99ggD//LSbi0Bs8MNME3AuxAPB7LQiSsFcMZ3EETE1OkAmvSQDTgCjpO6x0izy8i3H+H249f/FI89bfPMvd67RB1YQAnkPj05HWx9zUxyCGaxdSMdw0IKLZBUq2itwSsx6+ltbNhgCAbWxB7vOBpNeIHmk7zv753sSfk5C/cI48SzZyRbfliAMqcfXyj6kM3uhmAVmQ/Li5wkXY7Owhp9oYw1/Lpfl0FZUA5km3jUdCWg/yMQ0rdKtDvm749GASIIKChIdjmSFlfAc8pvKahHfpiL1XO9+NdwflU7AMkg6RYZpDxyM5wt86MdyLyIOxqzhD8a4DNzkpm2u9eGsxx77SxtteNVkDkxkt1xhW5Vw3amdIIKn+/VVR1Oyq8A13ZzLCtiqvrn+lJaWvejpF39fJPBXtvWxBmDJQYOL98nrG8vNwyFw6dQOgMKJEtfmxEH/2gjeJvi/cY8aNUMrVDWF304v9rrbO6Nm9LrM220Tq1/OfSdgqb9hBo7EwyDHZ9kV0yRLcU30LBDOGlBqa9BUq/CQbPFjWLfJuUqpVFKBOpvmBFt9OSP53m45DqcVWSdNBDeCawlpaDHfHJ95fUi+kS04KkmzaBos6vWpyxs2oIylLhi+r3SQYR1jyavG0r14d7SXLa/AU11f+p6eEoiM6Zp3fPIQ="
    # GITHUB_TOKEN
    - secure: "s9VMWQYN93W702bHud7wl29qKJfYIQH5B2d0b2rPU+/ZGW32AO3ichF8kRR5Z2ePJGETw2h20r6GEigUToC4eum9VA9yuLClDyvUP41XYslh0ZFT7RSCuVAl0pyhB9zml6LpnDa4EB2zuo6W/cbnvhvq5MJi9PHP0nSmGKBX/RIN0Yz5kkH6hjo3YqRu6NwftsDyRdpgFSmtDSSOrHRfwzFogg4OLNexGXC5AEgwjjEHH4N+2YCwX0LmZY5tlyxElkj23WGAlp9B3OFNnA68cw1axnNKiNKRL7VmlmykXxplkLz2YxKqovhup9uUlkzmC7aRlgEWrCvMAgaxDtgYf0KDCrYn4HQCmcuxuIgSqY8srLxEiZPuHxfBalTqvEXuehJQTDj9AmKx7v3jEYlAlDLS86sdxKtIpmsb5ReJcJ4aWWRJWcN7TdiRqINIasqYZuxPJqR7eVp1mNhXUq/uxi2RHxcdbt54f7eKz3ZBP9LpmyxcMWa9lrHjyvIz8BerLbkWSBfo8v62VJgG8hhn7JOm0e+5LO7y7vRldcpknVOLvrmsSIp/5T0ybQtka9FNQBV5/fPl3Ty7JMOvpYgrf4llXP1BG8WQWlpCI2Xbj7PM8//qWfnFa63n/dm3Q9+Z1bwftDMEqaLb972t68gl+K9gh2iT3+smHnGztow3NtE="
    # PYPI_PASSWD
    - secure: "eVqw72IFej1iFYefMNd67CXu82CiLrpten2SYarRsnrn5BIHFIrnNmeZ7ZVBv35oHsfk9rCJZBjwUKlzDKDKi9KX7NqVz2hMMJGxnHrAAdy4fYEPj0sRp9thtfsgRs24Ekmeyo/mqAd/qZOhDEGKJFERdvrTXIe0Gv4imKJDv5ZPdp7uelMGTS7nWRHa2uqKhGtEE8tEKtdsBJh27rjPv4nfyjfg3gsS8cbAL7gPBs5+5yZZo6SVJjpWBrWSIKpPBHqxFx9d6Rt/ebLbVNriUzJoS7lP4KT7CnllgQDY39sm0WT0XD41Z2FsbziZ5u4ede9rGIsJpB3Nls554dvb/saxlnO4fzAEu4tTT4ErRRdJaaAgxkx/CMDTL5ztKlyeh9Pq1qPzhaFDjG5qnE3ES1y8jyQkiZ583JMFvoCyGditFpBxEA7xOHCPpbN6D4U6JamlY9Ol7SlNpgfEH+/dFyOQ73r5skmj8zBbxAFaUK1vtpp7xRJDgxBU3ZRyHPq333Te0sxwikX4GTdBH0jTmWA25BzjgANPda5WI4RgQxNZ4f4GJJm1ldUziVl/SSltUBp5WIx3VjmeNNLRSygXyg/OleLH0pYtQO4fKb2DPo80TAO58Bqu4f0haPuymX7D5xB/L5y+GidJdJSuQ+c49YUNpROlGOJ4WrcCN1yrAT8="
    - GITHUB_REPO_NAME=theochem/gbasis
    - PROJECT_NAME=gbasis
    - CONDA_PKG_NAME_PY=gbasis
    - CPATH=${HOME}/miniconda/include/libint2

# TEMPLATED FROM https://raw.githubusercontent.com/theochem/python-cython-ci-example/download_template/.travis.yml
####
# EVERYTHING BELOW THIS LINE IS AUTOGENERATED.
####

# Do not use Travis Python to save some time.
language: generic
os:
  - linux
  - osx
osx_image: xcode8.3
dist: trusty
sudo: false

matrix:
  # We only test on Linux with one specific Python version, unless we make a release. All
  # other cases are allowed to fail and will exit early. With the fast_finish option,
  # travis will send a status update to github as soon as the non-allowed-to-fail has
  # finished. This speeds up testing in PRs.
  #
  # This is not ideal. It would be better to run just one item from the build matrix when
  # not preparing a release. This is not possible on Travis. There are several tickets on
  # travis-ci related to this limitation.
  #
  #    https://github.com/travis-ci/travis-ci/issues/7451
  #    https://github.com/travis-ci/travis-ci/issues/7149
  #    https://github.com/travis-ci/travis-ci/issues/2778
  #    ...
  fast_finish: true
  allow_failures:
  - os: osx


cache:
  directories:
    - $HOME/download # Sufficient to add miniconda.sh to TRAVIS cache.
    - $HOME/miniconda # Add the installation to TRAVIS cache.

before_cache:
- rm -rf $HOME/miniconda/conda-bld $HOME/miniconda/locks $HOME/miniconda/pkgs $HOME/miniconda/var $HOME/miniconda/conda-meta/history
- pip uninstall -y cardboardlint # Cardboardlint always installs even if no changes are made.

branches:
  only:
    - master
    - /^[0-9]+\.[0-9]+(\.[0-9]+)?([ab][0-9]+)?$/

before_install:
- if ! [[ $TRAVIS_TAG ]] && ! [[ $TRAVIS_OS_NAME == "linux" && $MYCONDAPY == "2.7" ]]; then exit 0; fi
# Get miniconda. Take the right version, so re-installing python is hopefully not needed.
- if test -e $HOME/miniconda/bin; then
    echo "miniconda already installed.";
  else
    echo "Installing miniconda.";
    rm -rf $HOME/miniconda;
    mkdir -p $HOME/download;
    if [[ -d $HOME/download/miniconda.sh ]]; then rm -rf $HOME/download/miniconda.sh; fi;
    if [ "${MYCONDAPY}" = "2.7" ]; then
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh -O $HOME/download/miniconda.sh;
      fi;
    else
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $HOME/download/miniconda.sh;
      fi;
    fi;
    bash $HOME/download/miniconda.sh -b -p $HOME/miniconda;
  fi


install:
- source $HOME/miniconda/bin/activate
- hash -r
# Configure conda and get a few essentials
- conda config --set always_yes yes
- conda config --add channels theochem
- conda install -q conda conda-build

# Set the version info from the git tag
- git fetch origin --tags &&
  export PROJECT_VERSION=$(python tools/gitversion.py) &&
  python tools/gitversion.py python > ${PROJECT_NAME}/version.py;

# Get a list of all build and runtime dependencies.
# This should become easier, without the copy to conda.recipe.ugly.
- conda render tools/conda.recipe > tools/conda.recipe/rendered.yaml
- CONDA_DEPENDENCIES=$(python -c "from yaml import load;
    req1 = load(open('tools/conda.recipe/rendered.yaml'))['requirements'];
    deps = req1['build'] + req1['run'];
    print(' '.join(set(dep.split()[0] for dep in deps)))")

# Get the right python version for building. This only does something for 3.5.
# Install extra package needed to make things work. Most things can be listed as
# dependencies on metal.yaml and setup.py, unless setup.py already imports them.
# Install conda tools for packaging and uploading
- conda install -q python=${MYCONDAPY} anaconda-client ${CONDA_DEPENDENCIES}
# Install more recent stuff with pip
- pip install --upgrade pylint codecov coverage pycodestyle pydocstyle
# Show conda info for debugging
- conda info -a

# Install the latest cardboardlinter
- if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    pip install --upgrade git+https://github.com/theochem/cardboardlint.git@master#egg=cardboardlint;
  fi

script:
# Static linting
# --------------
- if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    cardboardlinter --refspec $TRAVIS_BRANCH -f static;
  fi

# Unit tests and dynamic linting
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- if [[ $TRAVIS_TAG ]]; then
    conda build -q tools/conda.recipe &&
    conda install --use-local ${CONDA_PKG_NAME_PY} &&
    (cd; nosetests ${PROJECT_NAME} -v --detailed-errors) &&
    conda uninstall ${CONDA_PKG_NAME_PY};
  else
    python setup.py build_ext -i --define CYTHON_TRACE_NOGIL ${INPLACE_INC} &&
    nosetests ${PROJECT_NAME}
         -v --detailed-errors --with-coverage --cover-package=${PROJECT_NAME}
         --cover-tests --cover-inclusive --cover-branches &&
    coverage xml -i &&

    if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
       cardboardlinter --refspec $TRAVIS_BRANCH -f 'dynamic';
    fi
  fi

# Make CPP and PY source package for github deployment
- if [[ $TRAVIS_TAG ]]; then
    python setup.py sdist;
  fi

# Some other stuff
# ----------------

# Compile documentation
- if [[ -e doc ]]; then
    (cd doc; make html);
  fi

after_success:
# Upload the coverage analysis
- codecov -f coverage.xml

before_deploy:
# Try to set some env vars to configure deployment.
# Please keep the following lines. They will be used again as soon as it is supported on
# travis. See https://github.com/travis-ci/dpl/issues/613
#- export IS_PRERELEASE=$(python -c 'import os; tt=os.environ["TRAVIS_TAG"]; print("true" if ("a" in tt or "b" in tt) else "false")')
#- echo ${IS_PRERELEASE}
- export ANACONDA_LABEL=$(python -c 'import os; tt=os.environ["TRAVIS_TAG"]; print("alpha" if ("a" in tt) else ("beta" if "b" in tt else "main"))')
- echo ${ANACONDA_LABEL}

# In deployment, the env var TRAVIS_TAG contains the name of the current version, if any.
deploy:
- provider: releases
  skip_cleanup: true
  api_key: ${GITHUB_TOKEN}
  file: dist/${PROJECT_NAME}-${TRAVIS_TAG}.tar.gz
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true
    condition: "$MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux && $TRAVIS_TAG == *[ab]*"
  prerelease: true

- provider: releases
  skip_cleanup: true
  api_key: ${GITHUB_TOKEN}
  file: dist/${PROJECT_NAME}-${TRAVIS_TAG}.tar.gz
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true
    condition: "$MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux && $TRAVIS_TAG != *[ab]*"
  prerelease: false

- provider: script
  skip_cleanup: true
  script: anaconda -t $ANACONDA_TOKEN upload --force -l ${ANACONDA_LABEL} ${HOME}/miniconda/conda-bld/*/${PROJECT_NAME}-*.tar.bz2
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true

- provider: pypi
  skip_cleanup: true
  user: theochem
  password: ${PYPI_PASSWD}
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true
    condition: "$TRAVIS_TAG != *[ab]* && $MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux"

- provider: pages
  skip_cleanup: true
  github_token: ${GITHUB_TOKEN}
  project_name: ${PROJECT_NAME}
  local_dir: doc/_build/html
  on:
    repo: ${GITHUB_REPO_NAME}
    condition: "$TRAVIS_TAG != *[ab]* && $MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux"
    tags: true
