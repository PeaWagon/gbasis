env:
  matrix:
  - MYCONDAPY=2.7
#  - MYCONDAPY=3.5
#  - MYCONDAPY=3.6
  global:
    # ANACONDA_TOKEN
    - secure: "ZEez6ZLVYwitgGRiq1Z4QZLve/gH7Lgj7SoLqB93gfmJ8pK9wD4lf0l6hYnviEKFAP5TCmc2Y5HoPT4C9YtP4oFE9xdTD9kTYLkDb9/6PsP/bCDwOeLmqoBqjmqvhpMPMF/idLOH81lyuecedoxaQjK8Gf8Ybesz3p1X1FlDrJgrcTtvPpz9uhHQXwb7otZbsc6He+YWdKrZy8PiBidmP3rK3SZvSPBmk5nrgfWsP1fnE27RfbVwABZ6txE8ns9ceHXdjIoxScnF5OlxLMOaobNgRuk4IB5yZMQNgEFPfzklKZAlmeTLVKHMbywTN7+KO64Tqu02pg6SJm3bSTFircticELbz9bgu5W8Dw7TghU9X+IPYrCsL7Fk67Rwk4dMFfZRaJ7BsnSLJCWYlDcu8GQWZvZI7jM8zDde3Z78zYY5Jhk981OI4AtLgW1STrdikXJWMEV+e4YaDI5vlT+FGt7FNcc9MxgNiHq/TpejTStiVFHKzDiGKu5hvzzpxZXdqKlonjac2Ajkju7CXmcQk3QjLhGBdu1WdzaOEV/D3QjkrwRv5RP8twenYtTWxHpu77UsBAJc9LACoYPodyd4wccIYlkl/hcBhAMw44k39DCcAz7FyYjjsG3hNi1QK2fR8u8VXbElEp8CSb1kV5YsbM1vemgCDMEgwxy3EKlyolk="
    # GITHUB_TOKEN
    - secure: "tTmXQTiDjuSUGghvbxp6Aoyl8rk0LKCD5bZrr9HPqB8pPlqH+DpUn+O+wNiRgAjM9/BboRNCr7F3cNvFP1j31ehRzJ6zOLPqmKkwgaKq0PLNkEr21Dk/xEKrMI4OGbdZhtteMdMaVoYu1JM9lUR4X9uMxr51K9Yz6S9r/64DYRiuDssX7DaiH4EnKcr/KGLHHbNMLzS2nzYRaC8Kw6W9BJqwRLtNlj933TReK026unG7vUpMMsDCcPHLGkpWcbvGP/t0D8b10HP4yqfF2gXAmU7LJ9INnm9BaDPKfZGyB0Emweg9tTTJt4EviZkF0K+AGGPgzSJaET04MSL6LdkKUvGVMykAoTCc/WcmZftztelp1oQ1hJ+MQad0LVYqsplpsCAhdrG21MKuslLUPt34ORN6UVSFidvAccqS5yK+NWJ0YTGyo3DTVJOQNmAPwe6ztg+gZFkEP2l3Ovj29KkFAxzhEiF6JOCYfZoQQeFBjw2X3uql+Z/L173HxwHfL2yp/t/BBkwZ4xoQeVv1mWyjerBUwabB0+qGkeEfTQR4iwCh2yHNQOxFEYDUH31obKpQdh8nBVzH/ITts4hsdqfQIQNpCy0Fd+JEVySkwPv33L4QY07BRC2a6TDjvvXuLFHAAOw5sjlowPQuITWQYJLBHiE89UYzsnjLJ/N1R9yiKu4="
    # PYPI_PASSWD
    - secure: "DFw2WJDJzQRzA9fCr3mUIF+PwFF6bJiEhH/B51HGQyURmiIs0PZwcy9CjP7cFbv8mXB8fBefZq7GCHRNmta2CPXx9PCexFowkEsSKq/ezR6OHImFKUR94rKvYc9jz8JbFkOT+3sNlw21q7y/BMnPjW/MLXcJtpegNX7eBKxSEgy7SrldtVbOIUB9iYwuc/MMKKTsijEbGiXI08SzTDE5/x8RKo3vWwQKKnJkFoaZyWEQfUeB6LBfkc2KjtA/YgS1xEvtxLnrAcbSQKgC5eDdRDoBH95LErQhWCnpVUVdSHDSQpJKUV5ZnYCe6Lb91wFjcZjXliWeQlDy+HVPqi/lLUE/34dkzfV32VH6CyuFRXn8+exGcTzxkZ+aAiGFEROEUKgT5a9wbOCxIXnD34yu4D4CQixKz0yBBgvIyST7VsENIKmEww4WNAHc+XS+e7DOUUwqQsRmMX4/JvK+PqYpJ4uCra2EawCHQhezPvmFt91mFZ5DGZfREI8vFNJg6TXgOwzWWsyXIfvjzOJMop3lTJnLCrdVZ260z3B2qykrmj21h8p8cP9JHiuclC4+hHgIMLX5p2NlM8Pa2xsVTq8VY8Kcme/nIjhdec3jhiO7J7GHSHN7de3I7JAh0gvUbaoDxxY9u1HH/KhdbFPlQp0GxUB9QFg46DiqIGM0kLfesos="
    - GITHUB_REPO_NAME=theochem/gbasis
    - PROJECT_NAME=gbasis
    - CONDA_PKG_NAME_PY=gbasis
    - CPATH=${HOME}/miniconda/include/libint2

# TEMPLATED FROM https://raw.githubusercontent.com/theochem/python-cython-ci-example/download_template/.travis.yml
####
# EVERYTHING BELOW THIS LINE IS AUTOGENERATED.
####

# Do not use Travis Python to save some time.
language: generic
os:
  - linux
  - osx
osx_image: xcode8.3
dist: trusty
sudo: false

matrix:
  # We only test on Linux with one specific Python version, unless we make a release. All
  # other cases are allowed to fail and will exit early. With the fast_finish option,
  # travis will send a status update to github as soon as the non-allowed-to-fail has
  # finished. This speeds up testing in PRs.
  #
  # This is not ideal. It would be better to run just one item from the build matrix when
  # not preparing a release. This is not possible on Travis. There are several tickets on
  # travis-ci related to this limitation.
  #
  #    https://github.com/travis-ci/travis-ci/issues/7451
  #    https://github.com/travis-ci/travis-ci/issues/7149
  #    https://github.com/travis-ci/travis-ci/issues/2778
  #    ...
  fast_finish: true
  allow_failures:
  - os: osx


cache:
  directories:
    - $HOME/download # Sufficient to add miniconda.sh to TRAVIS cache.
    - $HOME/miniconda # Add the installation to TRAVIS cache.

before_cache:
- rm -rf $HOME/miniconda/conda-bld $HOME/miniconda/locks $HOME/miniconda/pkgs $HOME/miniconda/var $HOME/miniconda/conda-meta/history
- pip uninstall -y cardboardlint # Cardboardlint always installs even if no changes are made.

branches:
  only:
    - master
    - /^[0-9]+\.[0-9]+(\.[0-9]+)?([ab][0-9]+)?$/

before_install:
- if ! [[ $TRAVIS_TAG ]] && ! [[ $TRAVIS_OS_NAME == "linux" && $MYCONDAPY == "2.7" ]]; then exit 0; fi
# Get miniconda. Take the right version, so re-installing python is hopefully not needed.
- if test -e $HOME/miniconda/bin; then
    echo "miniconda already installed.";
  else
    echo "Installing miniconda.";
    rm -rf $HOME/miniconda;
    mkdir -p $HOME/download;
    if [[ -d $HOME/download/miniconda.sh ]]; then rm -rf $HOME/download/miniconda.sh; fi;
    if [ "${MYCONDAPY}" = "2.7" ]; then
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh -O $HOME/download/miniconda.sh;
      fi;
    else
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $HOME/download/miniconda.sh;
      fi;
    fi;
    bash $HOME/download/miniconda.sh -b -p $HOME/miniconda;
  fi


install:
- source $HOME/miniconda/bin/activate
- hash -r
# Configure conda and get a few essentials
- conda config --set always_yes yes
- conda config --add channels theochem
- conda install -q conda conda-build

# Set the version info from the git tag
- git fetch origin --tags &&
  export PROJECT_VERSION=$(python tools/gitversion.py) &&
  python tools/gitversion.py python > ${PROJECT_NAME}/version.py;

# Get a list of all build and runtime dependencies.
# This should become easier, without the copy to conda.recipe.ugly.
- conda render tools/conda.recipe > tools/conda.recipe/rendered.yaml
- CONDA_DEPENDENCIES=$(python -c "from yaml import load;
    req1 = load(open('tools/conda.recipe/rendered.yaml'))['requirements'];
    deps = req1['build'] + req1['run'];
    print(' '.join(set(dep.split()[0] for dep in deps)))")

# Get the right python version for building. This only does something for 3.5.
# Install extra package needed to make things work. Most things can be listed as
# dependencies on metal.yaml and setup.py, unless setup.py already imports them.
# Install conda tools for packaging and uploading
- conda install -q python=${MYCONDAPY} anaconda-client ${CONDA_DEPENDENCIES}
# Install more recent stuff with pip
- pip install --upgrade pylint codecov coverage pycodestyle pydocstyle
# Show conda info for debugging
- conda info -a

# Install the latest cardboardlinter
- if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    pip install --upgrade git+https://github.com/theochem/cardboardlint.git@master#egg=cardboardlint;
  fi

script:
# Static linting
# --------------
- if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    cardboardlinter --refspec $TRAVIS_BRANCH -f static;
  fi

# Unit tests and dynamic linting
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- if [[ $TRAVIS_TAG ]]; then
    conda build -q tools/conda.recipe &&
    conda install --use-local ${CONDA_PKG_NAME_PY} &&
    (cd; nosetests ${PROJECT_NAME} -v --detailed-errors) &&
    conda uninstall ${CONDA_PKG_NAME_PY};
  else
    python setup.py build_ext -i --define CYTHON_TRACE_NOGIL &&
    nosetests ${PROJECT_NAME}
         -v --detailed-errors --with-coverage --cover-package=${PROJECT_NAME}
         --cover-tests --cover-inclusive --cover-branches &&
    coverage xml -i &&

    if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
       cardboardlinter --refspec $TRAVIS_BRANCH -f 'dynamic';
    fi
  fi

# Make CPP and PY source package for github deployment
- if [[ $TRAVIS_TAG ]]; then
    python setup.py sdist;
  fi

# Some other stuff
# ----------------

# Compile documentation
- if [[ -e doc ]]; then
    (cd doc; make html);
  fi

after_success:
# Upload the coverage analysis
- codecov -f coverage.xml

before_deploy:
# Try to set some env vars to configure deployment.
# Please keep the following lines. They will be used again as soon as it is supported on
# travis. See https://github.com/travis-ci/dpl/issues/613
#- export IS_PRERELEASE=$(python -c 'import os; tt=os.environ["TRAVIS_TAG"]; print("true" if ("a" in tt or "b" in tt) else "false")')
#- echo ${IS_PRERELEASE}
- export ANACONDA_LABEL=$(python -c 'import os; tt=os.environ["TRAVIS_TAG"]; print("alpha" if ("a" in tt) else ("beta" if "b" in tt else "main"))')
- echo ${ANACONDA_LABEL}

# In deployment, the env var TRAVIS_TAG contains the name of the current version, if any.
deploy:
- provider: releases
  skip_cleanup: true
  api_key: ${GITHUB_TOKEN}
  file: dist/${PROJECT_NAME}-${TRAVIS_TAG}.tar.gz
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true
    condition: "$MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux && $TRAVIS_TAG == *[ab]*"
  prerelease: true

- provider: releases
  skip_cleanup: true
  api_key: ${GITHUB_TOKEN}
  file: dist/${PROJECT_NAME}-${TRAVIS_TAG}.tar.gz
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true
    condition: "$MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux && $TRAVIS_TAG != *[ab]*"
  prerelease: false

- provider: script
  skip_cleanup: true
  script: anaconda -t $ANACONDA_TOKEN upload --force -l ${ANACONDA_LABEL} ${HOME}/miniconda/conda-bld/*/${PROJECT_NAME}-*.tar.bz2
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true

- provider: pypi
  skip_cleanup: true
  user: theochem
  password: ${PYPI_PASSWD}
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true
    condition: "$TRAVIS_TAG != *[ab]* && $MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux"

- provider: pages
  skip_cleanup: true
  github_token: ${GITHUB_TOKEN}
  project_name: ${PROJECT_NAME}
  local_dir: doc/_build/html
  on:
    repo: ${GITHUB_REPO_NAME}
    condition: "$TRAVIS_TAG != *[ab]* && $MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux"
    tags: true
